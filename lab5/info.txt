openapi: 3.0.0
info:
  description: |
    ( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)
  version: "1.0.0"
  title: Audiences
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: Audiences@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Edw1x/Audience2/1.0.0
  - url: 'https://Audiences.swagger.io/v2'
tags:
  - name: Audience_Controll
    description: admin membering your Audiences
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: Your_Audience
    description: Access to your audience
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our Audiences
      url: 'http://swagger.io'
paths:
  /Audience:
    post:
      tags:
        - Audience_Controll
      summary: Add a new audience to the AudienceList
      operationId: addAudience
      responses:
        '405':
          description: Invalid input
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Audience'
            application/xml:
              schema:
                $ref: '#/components/schemas/Audience'
      security:
        - Audiences_auth:
            - 'write:audiences'
            - 'read:audiences'
      requestBody:
        $ref: '#/components/requestBodies/Audience'
  '/Audience/{audienceId}':
    get:
      tags:
        - Audience_Controll
      summary: Find audience by ID
      description: Returns a single audience
      operationId: getAudienceById
      parameters:
        - name: audienceId
          in: path
          description: ID of audience to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Audience'
            application/xml:
              schema:
                $ref: '#/components/schemas/Audience'
        '400':
          description: Invalid ID supplied
        '404':
          description: Audience not found
      security:
        - Audiences_auth:
            - 'write:audiences'
            - 'read:audiences'
    post:
      tags:
        - Audience_Controll
      summary: Updates a audience with form data
      operationId: updateAudienceWithForm
      parameters:
        - name: audienceId
          in: path
          description: ID of audience that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - Audiences_auth:
            - 'write:audiences'
            - 'read:audiences'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                status:
                  description: Updated status of the audience
                  type: string
    delete:
      tags:
        - Audience_Controll
      summary: Deletes an audience
      operationId: deleteAudience
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: audienceId
          in: path
          description: Audience id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: audience not found
      security:
        - Audiences_auth:
            - 'write:audiences'
            - 'read:audiences'
  
  /Your_Audience/order:
    post:
      tags:
        - Your_Audience
      summary: Place an order for an audience
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the audience
        required: true
  '/Your_Audience/order/{orderId}':
    get:
      tags:
        - Your_Audience
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of audience that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - Your_Audience
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    post:
      tags:
        - Your_Audience
      summary: Updates a status of the audience
      operationId: updateAudienceStatus
      parameters:
        - name: orderId
          in: path
          description: ID of audience that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                status:
                  description: Updated status of the audience
                  type: string
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
  
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        AudienceId:
          type: integer
          format: int64
        Date:
          type: string
          format: dd/mm/yyyy
        Time:
          type: string
          format: amount of hours to use the audience from this period
        status:
          type: string
          description: Order Status
          enum:
            - using
            - canselled
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Audience:
      type: object
      properties:
        id:
          type: integer
          format: int64
        numberOfPlaces:
          type: integer
          format: int64
        sizeOfScene:
          type: string
          example: 30 metres
        status:
          type: string
          description: audience status in the audience list
          enum:
            - available
            - pending(date)
            - sold
      xml:
        name: Audience
  requestBodies:
    Audience:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Audience'
        application/xml:
          schema:
            $ref: '#/components/schemas/Audience'
      description: Audience object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    Audiences_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://Audiences.swagger.io/oauth/dialog'
          scopes:
            'write:audiences': modify audiences in your account
            'read:audiences': read your audiences
    api_key:
      type: apiKey
      name: api_key
      in: header
