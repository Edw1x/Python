swagger: '2.0'
info:
  description: |
    ( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)
  version: 1.0.0
  title: Audiences
  termsOfService: http://swagger.io/terms/
  contact:
    email: Audiences@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# host: 127.0.0.1:8000

tags:
- name: Audience_Controll
  description: admin membering your Audiences
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: Your_Audience
  description: Access to your audience
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our Audiences
    url: http://swagger.io
# schemes:
# - http
paths:
  /audience/:
    post:
      tags:
      - Audience_Controll
      summary: Add a new audience to the AudienceList
      operationId: addAudience
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Audience object that needs to be added to the AudienceList
        required: true
        schema:
          $ref: '#/definitions/Audience'
      responses:
        405:
          description: Invalid input
  /audience/find/{audienceId}:
    get:
      tags:
      - Audience_Controll
      summary: Find audience by ID
      description: Returns a single audience
      operationId: getAudienceById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: audienceId
        in: path
        description: ID of audience to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Audience'
        400:
          description: Invalid ID supplied
        404:
          description: audience not found
  /Your_Audience/order/:
   post:
      tags:
      - Your_Audience
      summary: Place an order for an audience
      operationId: placeOrder
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: orderPost
        schema:
          type: object
          properties:
            AudienceId:
              type: integer
              format: int64
            Date:
              type: string
              format: date-time
            Date_End:
              type: string
              format: date-time
            status:
              type: string
              example: using
            address:
              type: string
              example: your address
            login:
              type: string 
            password:
              type: string 
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid Order
  /Your_Audience/orderBeforehand/:
   post:
      tags:
      - Your_Audience
      summary: Place an order for an audience beforehand
      operationId: placeOrderBeforHand
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: orderPosBeforehand
        schema:
          type: object
          properties:
            AudienceId:
              type: integer
              format: int64
            Date:
              type: string
              format: date-time
            Date_End:
              type: string
              format: date-time
            status:
              type: string
              example: using
            address:
              type: string
              example: your address
            login:
              type: string 
            password:
              type: string 
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid Order
  /Your_Audience/get/{orderId}:
    get:
      tags:
      - Your_Audience
      summary: Find  order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\
        \ Other values will generated exceptions
      operationId: getOrderById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: orderId
        in: path
        description: ID of audience that needs to be fetched
        required: true
        type: integer
        maximum: 10.0
        minimum: 1.0
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
  /Your_Audience/del/{orderId}/{audienceUserId}:
    delete:
      tags:
      - Your_Audience
      summary: Delete order by ID
      description: For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
      - application/json
      - application/xml
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        type: integer
        minimum: 1.0
      - name: audienceUserId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        type: integer
        minimum: 1.0
      - in: body
        name: orderDelete
        schema:
          type: object
          properties:
            login:
              type: string 
            password:
              type: string 
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
  /Your_Audience/change/{orderId}:
    get:
      tags:
      - Your_Audience
      summary: Updates a status of the order
      operationId: updateAudienceStatus
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml
      parameters:
      - name: orderId
        in: path
        description: ID of audience that needs to be updated
        required: true
        type: integer
        format: int64
      responses:
        405:
          description: Invalid input
  /user/register/:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
definitions:
  Order:
    type: object
    properties:
      AudienceId:
        type: integer
        format: int64
      Date:
        type: string
        format: date-time
      Date_End:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - using
          - canceled
      address:
        type: string
        example: your address
      user:
        $ref: '#/definitions/User'
    xml:
      name: Order
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
    xml:
      name: User
  Audience:
    type: object
    properties:
      numberOfPlaces:
        type: integer
        format: int64
      sizeOfScene:
        type: string
        example: 30 metres
      ordered_beforehand:
        type: boolean
        description: if this variable is 1 it means someone has ordered it beforehand
      status:
        type: string
        description: audience status in the audience list
        enum:
          - available
          - pending(date)
          - sold
    xml:
      name: Audience
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
schemes:
 - http
host: 127.0.0.1:8000
basePath: /
